[{"D:\\Learning react\\login-with-express-jwt\\src\\index.js":"1","D:\\Learning react\\login-with-express-jwt\\src\\reportWebVitals.js":"2","D:\\Learning react\\login-with-express-jwt\\src\\App.js":"3","D:\\Learning react\\login-with-express-jwt\\src\\router\\router.jsx":"4","D:\\Learning react\\login-with-express-jwt\\src\\components\\user\\routes.jsx":"5","D:\\Learning react\\login-with-express-jwt\\src\\components\\user\\login.jsx":"6","D:\\Learning react\\login-with-express-jwt\\src\\components\\user\\createUser.jsx":"7","D:\\Learning react\\login-with-express-jwt\\src\\components\\user\\background.jsx":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":254,"mtime":1625874454005,"results":"12","hashOfConfig":"10"},{"size":432,"mtime":1625802520746,"results":"13","hashOfConfig":"10"},{"size":703,"mtime":1625888211851,"results":"14","hashOfConfig":"10"},{"size":1430,"mtime":1626105378004,"results":"15","hashOfConfig":"10"},{"size":5925,"mtime":1626198288338,"results":"16","hashOfConfig":"10"},{"size":304,"mtime":1626132985881,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"10j5ebp",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"D:\\Learning react\\login-with-express-jwt\\src\\index.js",[],["36","37"],"D:\\Learning react\\login-with-express-jwt\\src\\reportWebVitals.js",[],"D:\\Learning react\\login-with-express-jwt\\src\\App.js",[],"D:\\Learning react\\login-with-express-jwt\\src\\router\\router.jsx",[],"D:\\Learning react\\login-with-express-jwt\\src\\components\\user\\routes.jsx",[],"D:\\Learning react\\login-with-express-jwt\\src\\components\\user\\login.jsx",[],"D:\\Learning react\\login-with-express-jwt\\src\\components\\user\\createUser.jsx",["38"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n\r\nfunction CreateUser() {\r\n\r\n    const [name, setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [passwordOne, setpasswordOne] = useState(\"\");\r\n    const [passwordTwo, setPasswordTwo] = useState(\"\");\r\n    const [regError, setregError] = useState(\"\");\r\n    const [registered, setRegistered] = useState(\"\");\r\n    useEffect(() => {\r\n\r\n\r\n\r\n    }, [regError]);\r\n\r\n\r\n    const postUser = async (e) => {\r\n        e.preventDefault();\r\n\r\n        if (validateInputs() === true) {\r\n\r\n            if (passwordOne === passwordTwo) {\r\n\r\n                const newUser = { name, email, password: passwordOne }\r\n\r\n                try {\r\n\r\n                    const response = await axios.post(process.env.REACT_APP_CREATE_USER, newUser);\r\n                    if (response.status == 201) {\r\n\r\n                        clearInputs();\r\n\r\n                        setRegistered(response.data.message);\r\n\r\n                        setTimeout(() => {\r\n\r\n                            setRegistered(\"\");\r\n\r\n                        }, 10000);\r\n\r\n                    } else {\r\n\r\n                        setregError(response.data.message);\r\n\r\n                    }\r\n\r\n\r\n                } catch (error) {\r\n\r\n                    console.log(error + \" Error: Something is bad with the endpoint.\");\r\n                }\r\n            } else {\r\n\r\n                setregError(\"Password does not match.\");\r\n\r\n                setTimeout(() => {\r\n                    setregError(\"\");\r\n                }, 5000);\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            // console.log(\"error inputValidation.\");\r\n        }\r\n    }\r\n\r\n    // true: no empty inputs, false: there must be one empty input.\r\n    const validateInputs = () => {\r\n\r\n        if (!name.trim()) {\r\n            setregError(\"Name is empty.\");\r\n            setTimeout(() => {\r\n                setregError(\"\");\r\n            }, 5000);\r\n        } else {\r\n\r\n            if (!email.trim()) {\r\n                setregError(\"Email is empty.\");\r\n                setTimeout(() => {\r\n                    setregError(\"\");\r\n                }, 5000);\r\n\r\n            } else {\r\n\r\n                if (!passwordOne.trim()) {\r\n                    setregError(\"Passwor is empty.\");\r\n                    setTimeout(() => {\r\n                        setregError(\"\");\r\n                    }, 5000);\r\n                } else {\r\n\r\n                    if (!passwordTwo.trim()) {\r\n                        setregError(\"Password confirmation is empty.\");\r\n                        setTimeout(() => {\r\n                            setregError(\"\");\r\n                        }, 5000);\r\n                    } else {\r\n                        return true;\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    const clearInputs = () => {\r\n\r\n        const inputs = document.getElementById('inputsRegister').getElementsByTagName('input');\r\n\r\n        for (var i = 0; i < inputs.length; i++) {\r\n            inputs[i].value = \"\";\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"home-right-con\">\r\n\r\n            <div className=\"content-home-right \">\r\n\r\n                <h1 className=\"bold-light\">Take 10% off today.</h1>\r\n\r\n                <form className=\"form-login\" id=\"inputsRegister\" onSubmit={postUser} >\r\n\r\n                    {\r\n                        registered ? (\r\n                            <div className=\"alert alert-success\" role=\"alert\">\r\n                                {registered}\r\n                            </div>\r\n                        ) :\r\n                            (<span></span>)\r\n                    }\r\n                    <label className=\"label-Inputs bold-light\" htmlFor=\"email\">Name and Lastname</label>\r\n                    <input className=\"login-input\" type=\"text\" onChange={(e) => { setName(e.target.value) }} placeholder=\"your name\" autoFocus />\r\n\r\n                    <label className=\"label-Inputs bold-light mt-24\" htmlFor=\"email\">Email</label>\r\n                    <input className=\"login-input\" type=\"email\" onChange={(e) => { setEmail(e.target.value) }} placeholder=\"Youremail@address.com\" />\r\n\r\n                    <div className=\"display-flex mt-24\">\r\n                        <div className=\"w-100\">\r\n                            <label className=\"label-Inputs bold-light \" htmlFor=\"email\">Password</label>\r\n                            <div className=\"\">\r\n                                <input onChange={(e) => { setpasswordOne(e.target.value) }} className=\"register-input\" type=\"password\" placeholder=\"Your password\" required=\"\" />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"w-100 inputs-space\">\r\n                            <label className=\"label-Inputs  bold-light\" htmlFor=\"email\">Password again</label>\r\n                            <div className=\"\">\r\n                                <input onChange={(e) => { setPasswordTwo(e.target.value) }} className=\"register-input\" type=\"password\" placeholder=\"Your password\" required=\"\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <button type=\"submit\" className=\"btn btn-primary w-100 btn-login\">Register</button>\r\n                    {\r\n                        regError ? (<span className=\"inputValidation-message\">{regError}</span>) : (<span></span>)\r\n                    }\r\n                </form>\r\n\r\n                <div className=\"p-after-bttn\">\r\n                    <p>\r\n                        <span className=\"textafterlogin\">Already have an account </span>\r\n                        <Link className=\"bold-light href\" to=\"/user/login\">Log In</Link>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default CreateUser;","D:\\Learning react\\login-with-express-jwt\\src\\components\\user\\background.jsx",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":34,"column":41,"nodeType":"45","messageId":"46","endLine":34,"endColumn":43},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]